"use strict";(self.webpackChunkinvesting_algorithm_framework_docs=self.webpackChunkinvesting_algorithm_framework_docs||[]).push([[4884],{3905:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>d});var o=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,o,r=function(e,n){if(null==e)return{};var t,o,r={},i=Object.keys(e);for(o=0;o<i.length;o++)t=i[o],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(o=0;o<i.length;o++)t=i[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var g=o.createContext({}),s=function(e){var n=o.useContext(g),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},c=function(e){var n=s(e.components);return o.createElement(g.Provider,{value:n},e.children)},p="mdxType",u={inlineCode:"code",wrapper:function(e){var n=e.children;return o.createElement(o.Fragment,{},n)}},f=o.forwardRef((function(e,n){var t=e.components,r=e.mdxType,i=e.originalType,g=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),p=s(t),f=r,d=p["".concat(g,".").concat(f)]||p[f]||u[f]||i;return t?o.createElement(d,a(a({ref:n},c),{},{components:t})):o.createElement(d,a({ref:n},c))}));function d(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var i=t.length,a=new Array(i);a[0]=f;var l={};for(var g in n)hasOwnProperty.call(n,g)&&(l[g]=n[g]);l.originalType=e,l[p]="string"==typeof e?e:r,a[1]=l;for(var s=2;s<i;s++)a[s]=t[s];return o.createElement.apply(null,a)}return o.createElement.apply(null,t)}f.displayName="MDXCreateElement"},4021:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>g,contentTitle:()=>a,default:()=>u,frontMatter:()=>i,metadata:()=>l,toc:()=>s});var o=t(7462),r=(t(7294),t(3905));const i={sidebar_position:1},a="Logging configuration",l={unversionedId:"Advanced Concepts/logging-configuration",id:"Advanced Concepts/logging-configuration",title:"Logging configuration",description:"The following code snippet shows how to setup a baseline configuration for logging in your application.",source:"@site/docs/Advanced Concepts/logging-configuration.md",sourceDirName:"Advanced Concepts",slug:"/Advanced Concepts/logging-configuration",permalink:"/investing-algorithm-framework/Advanced Concepts/logging-configuration",draft:!1,tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"defaultSideBar",previous:{title:"Multiple data sources",permalink:"/investing-algorithm-framework/Data/multiple-market-data-sources"}},g={},s=[],c={toc:s},p="wrapper";function u(e){let{components:n,...t}=e;return(0,r.kt)(p,(0,o.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"logging-configuration"},"Logging configuration"),(0,r.kt)("p",null,"The following code snippet shows how to setup a baseline configuration for logging in your application."),(0,r.kt)("admonition",{title:"Multiple orders mismatch",type:"info"},(0,r.kt)("p",{parentName:"admonition"},"We didn't want to introduce a custom logging configuration when creating the framework,\nso we use the default logging configuration of Python. The code snippet below shows how to configure the logging\nthrough Python's standard logging configuration. You can use this as a baseline configuration for your application.")),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"Notice the explicit logger for the investing_algorithm_framework package. This is required to ensure\nthat the framework logs are not suppressed by the root logger. You can change the logging level to\n",(0,r.kt)("inlineCode",{parentName:"p"},"logging.DEBUG")," to see more detailed logs.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"import logging.config\nconfig = {\n    'version': 1,\n    'disable_existing_loggers': True,\n    'formatters': {\n        'standard': {\n            'format': '%(asctime)s [%(levelname)s] %(name)s: %(message)s'\n        },\n    },\n    'handlers': {\n        'default': {\n            'level': 'INFO',\n            'formatter': 'standard',\n            'class': 'logging.StreamHandler',\n            'stream': 'ext://sys.stdout',  # Default is stderr\n        },\n    },\n    'loggers': {\n        '': {  # root logger\n            'handlers': ['default'],\n            'level': 'WARNING',\n            'propagate': False\n        },\n        'investing_algorithm_framework': {\n            'level': 'INFO',  # Set the desired root log level\n            'handlers': ['default'],\n            'propagate': False\n        }\n    },\n}\nlogging.config.dictConfig(config)\n")))}u.isMDXComponent=!0}}]);